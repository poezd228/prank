// Code generated by MockGen. DO NOT EDIT.
// Source: cron.go

// Package mock_cron is a generated GoMock package.
package mock_cron

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCron is a mock of Cron interface.
type MockCron struct {
	ctrl     *gomock.Controller
	recorder *MockCronMockRecorder
}

// MockCronMockRecorder is the mock recorder for MockCron.
type MockCronMockRecorder struct {
	mock *MockCron
}

// NewMockCron creates a new mock instance.
func NewMockCron(ctrl *gomock.Controller) *MockCron {
	mock := &MockCron{ctrl: ctrl}
	mock.recorder = &MockCronMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCron) EXPECT() *MockCronMockRecorder {
	return m.recorder
}

// RunJobs mocks base method.
func (m *MockCron) RunJobs() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunJobs")
}

// RunJobs indicates an expected call of RunJobs.
func (mr *MockCronMockRecorder) RunJobs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunJobs", reflect.TypeOf((*MockCron)(nil).RunJobs))
}

// Stop mocks base method.
func (m *MockCron) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockCronMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockCron)(nil).Stop))
}
