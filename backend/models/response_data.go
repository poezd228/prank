// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResponseData response data
//
// swagger:model ResponseData
type ResponseData struct {

	// achievements
	// Example: 15%
	Achievements string `json:"achievements,omitempty"`

	// bonus money
	// Example: 22.5%
	BonusMoney string `json:"bonus_money,omitempty"`

	// bonus points
	// Example: 12.0%
	BonusPoints string `json:"bonus_points,omitempty"`

	// default bonus
	// Example: 12%
	DefaultBonus string `json:"default_bonus,omitempty"`

	// extend data
	ExtendData []*ExtendData `json:"extend_data"`

	// full rate
	// Example: 100000
	FullRate string `json:"full_rate,omitempty"`

	// id
	// Example: 1949
	ID int64 `json:"id,omitempty"`

	// initiatives
	// Example: 0%
	Initiatives string `json:"initiatives,omitempty"`

	// money looted
	MoneyLooted string `json:"money_looted,omitempty"`

	// month
	// Example: March
	Month string `json:"month,omitempty"`

	// monthly points
	// Example: 39000
	MonthlyPoints string `json:"monthly_points,omitempty"`

	// name
	// Example: Лев
	Name string `json:"name,omitempty"`

	// overtime hours
	// Example: 0
	OvertimeHours string `json:"overtime_hours,omitempty"`

	// points spent
	PointsSpent string `json:"points_spent,omitempty"`

	// post
	// Example: Бэкендер
	Post string `json:"post,omitempty"`

	// premium
	// Example: 0
	Premium string `json:"premium,omitempty"`

	// promotion
	// Example: 0
	Promotion string `json:"promotion,omitempty"`

	// salary
	// Example: 100000
	Salary string `json:"salary,omitempty"`

	// total money
	// Example: 122.5
	TotalMoney string `json:"total_money,omitempty"`

	// total points
	// Example: 106000
	TotalPoints string `json:"total_points,omitempty"`

	// year
	// Example: 2024
	Year string `json:"year,omitempty"`
}

// Validate validates this response data
func (m *ResponseData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtendData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponseData) validateExtendData(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtendData) { // not required
		return nil
	}

	for i := 0; i < len(m.ExtendData); i++ {
		if swag.IsZero(m.ExtendData[i]) { // not required
			continue
		}

		if m.ExtendData[i] != nil {
			if err := m.ExtendData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extend_data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("extend_data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this response data based on the context it is used
func (m *ResponseData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExtendData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponseData) contextValidateExtendData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExtendData); i++ {

		if m.ExtendData[i] != nil {

			if swag.IsZero(m.ExtendData[i]) { // not required
				return nil
			}

			if err := m.ExtendData[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extend_data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("extend_data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResponseData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponseData) UnmarshalBinary(b []byte) error {
	var res ResponseData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
