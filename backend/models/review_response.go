// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ReviewResponse review response
//
// swagger:model ReviewResponse
type ReviewResponse struct {

	// Points for achievements
	Achievements *Points `json:"achievements,omitempty"`

	// Points for the bonus
	BonusPoint *Points `json:"bonus_point,omitempty"`

	// Points for the default bonus
	DefaultBonus *Points `json:"default_bonus,omitempty"`

	// Points for initiatives
	Initiatives *Points `json:"initiatives,omitempty"`

	// Points for overtime
	Overtime *Points `json:"overtime,omitempty"`
}

// Validate validates this review response
func (m *ReviewResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAchievements(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBonusPoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultBonus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiatives(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOvertime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReviewResponse) validateAchievements(formats strfmt.Registry) error {
	if swag.IsZero(m.Achievements) { // not required
		return nil
	}

	if m.Achievements != nil {
		if err := m.Achievements.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("achievements")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("achievements")
			}
			return err
		}
	}

	return nil
}

func (m *ReviewResponse) validateBonusPoint(formats strfmt.Registry) error {
	if swag.IsZero(m.BonusPoint) { // not required
		return nil
	}

	if m.BonusPoint != nil {
		if err := m.BonusPoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bonus_point")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bonus_point")
			}
			return err
		}
	}

	return nil
}

func (m *ReviewResponse) validateDefaultBonus(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultBonus) { // not required
		return nil
	}

	if m.DefaultBonus != nil {
		if err := m.DefaultBonus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("default_bonus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("default_bonus")
			}
			return err
		}
	}

	return nil
}

func (m *ReviewResponse) validateInitiatives(formats strfmt.Registry) error {
	if swag.IsZero(m.Initiatives) { // not required
		return nil
	}

	if m.Initiatives != nil {
		if err := m.Initiatives.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initiatives")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("initiatives")
			}
			return err
		}
	}

	return nil
}

func (m *ReviewResponse) validateOvertime(formats strfmt.Registry) error {
	if swag.IsZero(m.Overtime) { // not required
		return nil
	}

	if m.Overtime != nil {
		if err := m.Overtime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("overtime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("overtime")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this review response based on the context it is used
func (m *ReviewResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAchievements(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBonusPoint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefaultBonus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInitiatives(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOvertime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReviewResponse) contextValidateAchievements(ctx context.Context, formats strfmt.Registry) error {

	if m.Achievements != nil {

		if swag.IsZero(m.Achievements) { // not required
			return nil
		}

		if err := m.Achievements.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("achievements")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("achievements")
			}
			return err
		}
	}

	return nil
}

func (m *ReviewResponse) contextValidateBonusPoint(ctx context.Context, formats strfmt.Registry) error {

	if m.BonusPoint != nil {

		if swag.IsZero(m.BonusPoint) { // not required
			return nil
		}

		if err := m.BonusPoint.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bonus_point")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bonus_point")
			}
			return err
		}
	}

	return nil
}

func (m *ReviewResponse) contextValidateDefaultBonus(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultBonus != nil {

		if swag.IsZero(m.DefaultBonus) { // not required
			return nil
		}

		if err := m.DefaultBonus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("default_bonus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("default_bonus")
			}
			return err
		}
	}

	return nil
}

func (m *ReviewResponse) contextValidateInitiatives(ctx context.Context, formats strfmt.Registry) error {

	if m.Initiatives != nil {

		if swag.IsZero(m.Initiatives) { // not required
			return nil
		}

		if err := m.Initiatives.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initiatives")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("initiatives")
			}
			return err
		}
	}

	return nil
}

func (m *ReviewResponse) contextValidateOvertime(ctx context.Context, formats strfmt.Registry) error {

	if m.Overtime != nil {

		if swag.IsZero(m.Overtime) { // not required
			return nil
		}

		if err := m.Overtime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("overtime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("overtime")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReviewResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReviewResponse) UnmarshalBinary(b []byte) error {
	var res ReviewResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
